name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]
        rust: [stable, beta, nightly]
        exclude:
          # Reduce CI load by excluding some combinations
          - os: windows-latest
            rust: beta
          - os: macOS-latest
            rust: beta
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}
        components: rustfmt, clippy

    - name: Cache Cargo registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ matrix.rust }}-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-${{ matrix.rust }}-
          ${{ runner.os }}-cargo-

    - name: Check formatting
      if: matrix.rust == 'stable' && matrix.os == 'ubuntu-latest'
      run: cargo fmt --all -- --check

    - name: Run Clippy
      if: matrix.rust == 'stable'
      run: cargo clippy --all-targets --all-features -- -D warnings

    - name: Build
      run: cargo build --verbose --all-features

    - name: Build examples
      run: cargo build --examples --verbose --all-features

    - name: Run tests
      run: cargo test --verbose --all-features

    - name: Run tests with release mode
      run: cargo test --verbose --all-features --release

    - name: Run single-threaded tests
      run: cargo test --verbose --all-features -- --test-threads=1

    - name: Run Rayon example
      if: matrix.rust == 'stable'
      run: cargo run --example rayon --release

    - name: Run Rayon example with profiler
      if: matrix.rust == 'stable' && matrix.os == 'ubuntu-latest'
      run: cargo run --example rayon --features profiler --release

  miri:
    name: Miri (Memory Safety)
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust nightly with Miri
      uses: dtolnay/rust-toolchain@nightly
      with:
        components: miri

    - name: Cache Cargo registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-miri-${{ hashFiles('**/Cargo.lock') }}

    - name: Run Miri
      run: |
        cargo miri setup
        cargo miri test --verbose
      env:
        MIRIFLAGS: -Zmiri-strict-provenance -Zmiri-symbolic-alignment-check

  sanitizer:
    name: Address Sanitizer
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust nightly
      uses: dtolnay/rust-toolchain@nightly
      with:
        components: rust-src

    - name: Cache Cargo registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-sanitizer-${{ hashFiles('**/Cargo.lock') }}

    - name: Run tests with AddressSanitizer
      run: |
        export RUSTFLAGS="-Z sanitizer=address"
        export RUSTDOCFLAGS="-Z sanitizer=address"
        cargo +nightly test --verbose --target x86_64-unknown-linux-gnu -Z build-std
      env:
        ASAN_OPTIONS: detect_odr_violation=0

  thread_sanitizer:
    name: Thread Sanitizer
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust nightly
      uses: dtolnay/rust-toolchain@nightly
      with:
        components: rust-src

    - name: Cache Cargo registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-tsan-${{ hashFiles('**/Cargo.lock') }}

    - name: Run tests with ThreadSanitizer
      run: |
        export RUSTFLAGS="-Z sanitizer=thread"
        export RUSTDOCFLAGS="-Z sanitizer=thread"
        cargo +nightly test --verbose --target x86_64-unknown-linux-gnu -Z build-std
      env:
        TSAN_OPTIONS: halt_on_error=1

  examples:
    name: Examples
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust stable
      uses: dtolnay/rust-toolchain@stable

    - name: Cache Cargo registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-examples-${{ hashFiles('**/Cargo.lock') }}

    - name: Build all examples
      run: cargo build --examples --all-features --release

    - name: Run Rayon example (basic)
      run: |
        echo "Running Rayon example without profiler..."
        timeout 300 cargo run --example rayon --release

    - name: Run Rayon example (with profiler)
      run: |
        echo "Running Rayon example with profiler..."
        timeout 300 cargo run --example rayon --features profiler --release

  benchmark:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust stable
      uses: dtolnay/rust-toolchain@stable

    - name: Cache Cargo registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-bench-${{ hashFiles('**/Cargo.lock') }}

    - name: Run benchmarks
      run: |
        # Run the comprehensive end-to-end test as a benchmark
        cargo test test_end_to_end_write_read_cycle --release -- --nocapture --ignored
        
        # Run Rayon example as performance benchmark
        echo "Benchmarking Rayon example..."
        time cargo run --example rayon --features profiler --release
        
        # If you add criterion benchmarks later:
        # cargo bench --all-features

  docs:
    name: Documentation
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust stable
      uses: dtolnay/rust-toolchain@stable

    - name: Cache Cargo registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-docs-${{ hashFiles('**/Cargo.lock') }}

    - name: Build documentation
      run: cargo doc --all-features --no-deps --document-private-items

    - name: Deploy docs to GitHub Pages
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./target/doc
        force_orphan: true

  minimum_rust_version:
    name: Minimum Rust Version
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust 1.70.0 (MSRV)
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: 1.70.0

    - name: Cache Cargo registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-msrv-${{ hashFiles('**/Cargo.lock') }}

    - name: Test with MSRV
      run: cargo test --verbose --all-features

    - name: Build examples with MSRV
      run: cargo build --examples --verbose --all-features

  stress_test:
    name: Stress Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust stable
      uses: dtolnay/rust-toolchain@stable

    - name: Cache Cargo registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-stress-${{ hashFiles('**/Cargo.lock') }}

    - name: Run with different thread counts
      run: |
        # Test with various thread pool sizes
        for threads in 1 2 4 8 16 32; do
          echo "Testing with $threads threads"
          RAYON_NUM_THREADS=$threads cargo test --release -- --test-threads=$threads
        done

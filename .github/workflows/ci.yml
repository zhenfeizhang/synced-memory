name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]
        rust: [stable, beta, nightly]
        exclude:
          # Reduce CI load by excluding some combinations
          - os: windows-latest
            rust: beta
          - os: macOS-latest
            rust: beta
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}
        components: rustfmt, clippy

    - name: Cache Cargo registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ matrix.rust }}-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-${{ matrix.rust }}-
          ${{ runner.os }}-cargo-

    - name: Check formatting
      if: matrix.rust == 'stable' && matrix.os == 'ubuntu-latest'
      run: cargo fmt --all -- --check

    - name: Run Clippy
      if: matrix.rust == 'stable'
      run: cargo clippy --all-targets --all-features -- -D warnings

    - name: Build
      run: cargo build --verbose --all-features

    - name: Run tests
      run: cargo test --verbose --all-features

    - name: Run tests with release mode
      run: cargo test --verbose --all-features --release

    - name: Run single-threaded tests
      run: cargo test --verbose --all-features -- --test-threads=1

  miri:
    name: Miri (Memory Safety)
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust nightly with Miri
      uses: dtolnay/rust-toolchain@nightly
      with:
        components: miri

    - name: Cache Cargo registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-miri-${{ hashFiles('**/Cargo.lock') }}

    - name: Run Miri
      run: |
        cargo miri setup
        cargo miri test --verbose
      env:
        MIRIFLAGS: -Zmiri-strict-provenance -Zmiri-symbolic-alignment-check

  sanitizer:
    name: Address Sanitizer
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust nightly
      uses: dtolnay/rust-toolchain@nightly
      with:
        components: rust-src

    - name: Cache Cargo registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-sanitizer-${{ hashFiles('**/Cargo.lock') }}

    - name: Run tests with AddressSanitizer
      run: |
        export RUSTFLAGS="-Z sanitizer=address"
        export RUSTDOCFLAGS="-Z sanitizer=address"
        cargo +nightly test --verbose --target x86_64-unknown-linux-gnu -Z build-std
      env:
        ASAN_OPTIONS: detect_odr_violation=0

  thread_sanitizer:
    name: Thread Sanitizer
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust nightly
      uses: dtolnay/rust-toolchain@nightly
      with:
        components: rust-src

    - name: Cache Cargo registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-tsan-${{ hashFiles('**/Cargo.lock') }}

    - name: Run tests with ThreadSanitizer
      run: |
        export RUSTFLAGS="-Z sanitizer=thread"
        export RUSTDOCFLAGS="-Z sanitizer=thread"
        cargo +nightly test --verbose --target x86_64-unknown-linux-gnu -Z build-std
      env:
        TSAN_OPTIONS: halt_on_error=1

  benchmark:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust stable
      uses: dtolnay/rust-toolchain@stable

    - name: Cache Cargo registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-bench-${{ hashFiles('**/Cargo.lock') }}

    - name: Run benchmarks
      run: |
        # Run the comprehensive end-to-end test as a benchmark
        cargo test test_end_to_end_write_read_cycle --release -- --nocapture --ignored
        
        # If you add criterion benchmarks later:
        # cargo bench --all-features

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust stable
      uses: dtolnay/rust-toolchain@stable
      with:
        components: llvm-tools-preview

    - name: Install cargo-llvm-cov
      uses: taiki-e/install-action@cargo-llvm-cov

    - name: Cache Cargo registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-coverage-${{ hashFiles('**/Cargo.lock') }}

    - name: Generate coverage report
      run: cargo llvm-cov --all-features --workspace --lcov --output-path lcov.info

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        files: lcov.info
        fail_ci_if_error: true

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust stable
      uses: dtolnay/rust-toolchain@stable

    - name: Install cargo-audit
      uses: taiki-e/install-action@cargo-audit

    - name: Run security audit
      run: cargo audit

  docs:
    name: Documentation
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust stable
      uses: dtolnay/rust-toolchain@stable

    - name: Cache Cargo registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-docs-${{ hashFiles('**/Cargo.lock') }}

    - name: Build documentation
      run: cargo doc --all-features --no-deps --document-private-items

    - name: Deploy docs to GitHub Pages
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./target/doc
        force_orphan: true

  minimum_rust_version:
    name: Minimum Rust Version
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust 1.70.0 (MSRV)
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: 1.70.0

    - name: Cache Cargo registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-msrv-${{ hashFiles('**/Cargo.lock') }}

    - name: Test with MSRV
      run: cargo test --verbose --all-features

  stress_test:
    name: Stress Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust stable
      uses: dtolnay/rust-toolchain@stable

    - name: Cache Cargo registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-stress-${{ hashFiles('**/Cargo.lock') }}

    - name: Run stress tests
      run: |
        # Run tests multiple times to catch race conditions
        for i in {1..10}; do
          echo "Stress test iteration $i"
          cargo test test_end_to_end_write_read_cycle --release -- --nocapture
        done

    - name: Run with different thread counts
      run: |
        # Test with various thread pool sizes
        for threads in 1 2 4 8 16 32; do
          echo "Testing with $threads threads"
          RAYON_NUM_THREADS=$threads cargo test --release -- --test-threads=$threads
        done

  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [test, miri, sanitizer]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust stable
      uses: dtolnay/rust-toolchain@stable

    - name: Cache Cargo registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-integration-${{ hashFiles('**/Cargo.lock') }}

    - name: Create integration test project
      run: |
        cargo new --bin integration_test
        cd integration_test
        echo 'synced-memory = { path = ".." }' >> Cargo.toml
        echo 'rand = "0.8"' >> Cargo.toml

    - name: Write integration test
      run: |
        cat > integration_test/src/main.rs << 'EOF'
        use std::sync::Arc;
        use std::thread;
        use synched_memory::SynchedMemory;
        use rand::Rng;

        fn main() {
            const THREADS: usize = 8;
            const ITERATIONS: usize = 100;
            const SEGMENT_SIZE: usize = 16;

            let memory = Arc::new(SynchedMemory::<u32>::new(THREADS, SEGMENT_SIZE));
            
            let handles: Vec<_> = (0..THREADS).map(|thread_id| {
                let mem = Arc::clone(&memory);
                thread::spawn(move || {
                    let local_share = mem.build_local_handler(thread_id);
                    let mut rng = rand::thread_rng();
                    
                    for iteration in 0..ITERATIONS {
                        let data: Vec<u32> = (0..rng.gen_range(1..=SEGMENT_SIZE))
                            .map(|i| (thread_id * 1000 + iteration * 10 + i) as u32)
                            .collect();
                        
                        let _global_data = mem.write_local_memory_and_sync_read(&local_share, &data);
                        
                        if thread_id == 0 {
                            mem.update_global_timestamp();
                        }
                    }
                })
            }).collect();

            for handle in handles {
                handle.join().unwrap();
            }
            
            println!("Integration test completed successfully!");
        }
        EOF

    - name: Run integration test
      run: |
        cd integration_test
        cargo run --release